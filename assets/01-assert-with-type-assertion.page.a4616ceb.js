import{h as s}from"./vendor.0cee6789.js";const n=[s("h1",{},["Assert with type assertions"]),s("h2",{},["Problem"]),s("p",{},["You want to assert something is true, while let the typings of the related variables reflects your assertion. For example:"]),s("div",{innerHTML:`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #F286C4">let</span><span style="color: #F6F6F4"> x</span><span style="color: #F286C4">:</span><span style="color: #F6F6F4"> </span><span style="color: #97E1F1; font-style: italic">number</span><span style="color: #F6F6F4"> </span><span style="color: #F286C4">|</span><span style="color: #F6F6F4"> </span><span style="color: #97E1F1; font-style: italic">null</span><span style="color: #F6F6F4"> </span><span style="color: #F286C4">=</span><span style="color: #F6F6F4"> </span><span style="color: #BF9EEE">3</span></span>
<span class="line"><span style="color: #62E884">assert</span><span style="color: #F6F6F4">(x </span><span style="color: #F286C4">!==</span><span style="color: #F6F6F4"> </span><span style="color: #BF9EEE">null</span><span style="color: #F6F6F4">)</span></span>
<span class="line"><span style="color: #F6F6F4">x</span><span style="color: #F286C4">++</span><span style="color: #F6F6F4"> </span><span style="color: #7B7F8B">// here x is guaranteed to be \`number\`</span></span>
<span class="line"></span></code></pre>`}),s("h2",{},["Solution"]),s("div",{innerHTML:`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #F286C4">export</span><span style="color: #F6F6F4"> </span><span style="color: #F286C4">function</span><span style="color: #F6F6F4"> </span><span style="color: #62E884">assert</span><span style="color: #F6F6F4">(</span></span>
<span class="line"><span style="color: #F6F6F4">  </span><span style="color: #FFB86C; font-style: italic">condition</span><span style="color: #F286C4">:</span><span style="color: #F6F6F4"> </span><span style="color: #97E1F1; font-style: italic">boolean</span><span style="color: #F6F6F4">,</span></span>
<span class="line"><span style="color: #F6F6F4">  </span><span style="color: #FFB86C; font-style: italic">message</span><span style="color: #F286C4">?:</span><span style="color: #F6F6F4"> </span><span style="color: #97E1F1; font-style: italic">string</span><span style="color: #F6F6F4">,</span></span>
<span class="line"><span style="color: #F6F6F4">)</span><span style="color: #F286C4">:</span><span style="color: #F6F6F4"> </span><span style="color: #F286C4">asserts</span><span style="color: #F6F6F4"> </span><span style="color: #FFB86C; font-style: italic">condition</span><span style="color: #F6F6F4"> {</span></span>
<span class="line"><span style="color: #F6F6F4">  </span><span style="color: #F286C4">if</span><span style="color: #F6F6F4"> (</span><span style="color: #F286C4">!</span><span style="color: #F6F6F4">condition) {</span></span>
<span class="line"><span style="color: #F6F6F4">    </span><span style="color: #F286C4">throw</span><span style="color: #F6F6F4"> </span><span style="color: #F286C4; font-weight: bold">new</span><span style="color: #F6F6F4"> </span><span style="color: #97E1F1; font-style: italic">Error</span><span style="color: #F6F6F4">(message </span><span style="color: #F286C4">??</span><span style="color: #F6F6F4"> </span><span style="color: #DEE492">&#39;</span><span style="color: #E7EE98">assertion error</span><span style="color: #DEE492">&#39;</span><span style="color: #F6F6F4">)</span></span>
<span class="line"><span style="color: #F6F6F4">  }</span></span>
<span class="line"><span style="color: #F6F6F4">}</span></span>
<span class="line"></span></code></pre>`})];var l={render(){return n}};const o={title:"Assert with type assertion",layout:"book"};export{l as default,o as frontmatter,n as nodes};
